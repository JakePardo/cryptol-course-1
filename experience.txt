* Cryptol to be installed and
* this module to load successfully.
* changing the display base in the interpreter,
* querying the built-in help system,
* browsing symbols,
* chaining commands with `let` and `it`,
* loading and reloading modules,
* evaluating expressions,
* using the built-in editor, and
* issuing batch commands.
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* Cryptol's sequence and `Integer` types,
* demoting types variables to value variables,
* the `:prove` command,
* manipulating sequences using `#`, `take`, `drop`, `split`, `join`,
* writing functions and properties,
* sequence comprehensions,
* functions with curried parameters,
* logical, comparison, arithmetic, and conditional operators.
* type parameters and type constraints,
* pattern matching,
* the use of pre-written cryptographic routines from other modules,
* navigating some nuances of Cryptol's type checking system, and
* the `foldl` operator.
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* Cryptol's sequence and `Integer` types,
* demoting types variables to value variables,
* the `:prove` command,
* manipulating sequences using `#`, `take`, `drop`, `split`, `join`,
* writing functions and properties,
* sequence comprehensions,
* functions with curried parameters,
* logical, comparison, arithmetic, and conditional operators.
* type parameters and type constraints,
* pattern matching,
* the use of pre-written cryptographic routines from other modules,
* navigating some nuances of Cryptol's type checking system, and
* the `foldl` operator.
* Cryptol to be installed,
* the Software Analysis Workbench (SAW) to be installed.
* Cryptol to be installed,
* the Software Analysis Workbench (SAW) to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* Cryptol's sequence types,
* manipulating sequences using `#`, `take`, `split`, `join`, `head`,
* writing functions and properties,
* sequence comprehensions,
* functions with curried parameters,
* logical, comparison, arithmetic, indexing, slicing, and
* writing functions and properties, and
* the Software Analysis Workbench.
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* Cryptol's sequence types,
* manipulating sequences using `#`, `take`, `split`, `join`, `head`,
* writing functions and properties,
* sequence comprehensions,
* functions with curried parameters,
* logical, comparison, arithmetic, indexing, slicing, and
* writing functions and properties, and
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* sequence and `Integer` types,
* the `:prove` and `:sat` commands,
* manipulating sequences using `#`, `take`, `split`, and `join`,
* writing functions and properties,
* lambda functions,
* sequence comprehensions, and
* logical, comparison, and arithmetic operators.
* lambda functions,
* `:prove` and `:sat` commands, and
* different provers.
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* sequence and `Integer` types,
* the `:prove` and `:sat` commands,
* manipulating sequences using `#`, `take`, `split`, and `join`,
* writing functions and properties,
* lambda functions,
* sequence comprehensions, and
* logical, comparison, and arithmetic operators.
* lambda functions,
* `:prove` and `:sat` commands, and
* different provers.
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* Cryptol's sequence types,
* the `:prove` command,
* manipulating sequences using `#`, `join`, and `reverse`,
* writing functions,
* sequence comprehensions, and
* logical, comparison, arithmetic, and conditional operators.
* Cryptol's support for polynomials including expressing polynomials
* functions with curried parameters,
* writing functions, and
* sequence comprehensions.
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* Cryptol's sequence types,
* the `:prove` command,
* manipulating sequences using `#`, `join`, and `reverse`,
* writing functions,
* sequence comprehensions, and
* logical, comparison, arithmetic, and conditional operators.
* Cryptol's support for polynomials including expressing polynomials
* functions with curried parameters,
* writing functions, and
* sequence comprehensions.
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* Cryptol's sequence and `Integer` types,
* the `:prove` command,
* manipulating sequences using `#`, `take`, `split`, `join`,
* writing functions and properties,
* sequence comprehensions,
* functions with curried parameters,
* logical, comparison, arithmetic, indexing, slicing, and
* the `sum` and `carry` operators.
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* Cryptol's sequence and `Integer` types,
* the `:prove` command,
* manipulating sequences using `#`, `take`, `split`, `join`,
* writing functions and properties,
* sequence comprehensions,
* functions with curried parameters,
* logical, comparison, arithmetic, indexing, slicing, and
* the `sum` and `carry` operators.
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules, evaluating functions, and browsing symbols in the
* Cryptol's `Bit`, sequence, `Integer`, tuple, and record types,
* the `:prove` command,
* manipulating sequences using `take`, `drop`, `split`, `groupBy`,
* lambda functions,
* enumerations and sequence comprehensions,
* `/\`, `\/`, `==>` -- single bit logical operations,
* `~`, `&&`, `||`, `^` -- logical operations for sequences,
* `==`, `!=` -- structural comparison,
* `==`, `>=`, `>`, `<=`, `<` -- nonnegative word comparisons,
* `+`, `-`, `*`, `/`, `%`, `**` -- wordwise modular arithmetic,
* `>>`, `<<`, `>>>`, `<<<` -- shifts and rotates,
* `#` -- concatenation,
* `@` -- sequence indexing, and
* `if then else` -- conditional expressions.
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* Cryptol's sequence types,
* the `:prove` command,
* manipulating sequences using `#`, `split`, `join`, `take`, `drop`,
* writing functions and properties,
* sequence comprehensions, and
* logical, comparison, arithmetic, indexing, and conditional
* type parameters and type constraints,
* demoting types variables to value variables,
* manipulating sequences,
* writing functions and properties, and
* navigating some nuances of Cryptol's type checking system.
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* Cryptol's sequence types,
* the `:prove` command,
* manipulating sequences using `map`, `iterate`,
* writing functions and properties, and
* logical, comparison, arithmetic, and indexing operators.
* type parameters and type constraints,
* manipulating sequences, and
* writing functions and properties.
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* Cryptol's sequence types,
* the `:prove` command,
* manipulating sequences using `#`, `split`, `join`, `take`, `drop`,
* writing functions and properties,
* sequence comprehensions, and
* logical, comparison, arithmetic, indexing, and conditional
* type parameters and type constraints,
* demoting types variables to value variables,
* manipulating sequences,
* writing functions and properties, and
* navigating some nuances of Cryptol's type checking system.
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* Cryptol's sequence types,
* the `:prove` command,
* manipulating sequences using `map`, `iterate`,
* writing functions and properties, and
* logical, comparison, arithmetic, and indexing operators.
* type parameters and type constraints,
* manipulating sequences, and
* writing functions and properties.
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* Cryptol's sequence type,
* manipulating sequences using `#`, `split`, and `join`, and
* writing functions.
* Cryptol to be installed,
* this module to load successfully, and
* an editor for completing the exercises in this file.
* loading modules and evaluating functions in the interpreter,
* Cryptol's sequence type,
* manipulating sequences using `#`, `split`, and `join`, and
* writing functions.
* Cryptol to be installed and
* this module to load successfully.
* loading modules, evaluating functions, and browsing symbols in the
* Cryptol's `Bit`, sequence, `Integer`, tuple, and record types,
* the `:prove` command,
* manipulating sequences using `take`, `drop`, `split`, `groupBy`,
* lambda functions,
* enumerations and sequence comprehensions,
* `/\`, `\/`, `==>` -- single bit logical operations,
* `~`, `&&`, `||`, `^` -- logical operations for sequences,
* `==`, `!=` -- structural comparison,
* `==`, `>=`, `>`, `<=`, `<` -- nonnegative word comparisons,
* `+`, `-`, `*`, `/`, `%`, `**` -- wordwise modular arithmetic,
* `>>`, `<<`, `>>>`, `<<<` -- shifts and rotates,
* `#` -- concatenation,
* `@` -- sequence indexing, and
* `if then else` -- conditional expressions.
* Using 'Integer' for type argument 'a' of 'Cryptol::fromThenTo'
* Cryptol to be installed and
* this module to load successfully.
* loading modules and evaluating functions in the interpreter and
* the `:prove` and `:sat` commands.
* Cryptol to be installed and
* this module to load successfully.
* loading modules and evaluating functions in the interpreter and
* the `:prove` and `:sat` commands.
* Cryptol to be installed and
* this module to load successfully.
* loading modules and evaluating functions in the interpreter and
* the `:sat` command.
* Cryptol to be installed and
* this module to load successfully.
* loading modules and evaluating functions in the interpreter and
* the `:prove` and `:sat` commands.
