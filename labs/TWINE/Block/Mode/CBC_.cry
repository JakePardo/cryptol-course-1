/* *
 * Cipher Block Chaining Mode
 * adapted from `labs::TWINE::Block::Mode::CBC` in
 * `https://github.com/GaloisInc/cryptol-specs`
 */
module labs::TWINE::Block::Mode::CBC_ where

import `labs::TWINE::Block_ as BlockCipher_

parameter
  // labs::TWINE::Block parameters

  /** symmetric en/decryption key */
  type _Key: *
  /** unit of text applied to block cipher */
  type _Block: *
  /** needed to prove decryption recovers encrypted block(s) */
  type constraint Cmp Block

  /** encrypt a block */
  _encryptBlock: BlockOp
  /** decrypt a block */
  _decryptBlock: BlockOp


  // CBC parameters

  /** blocks must be XOR-able */
  type constraint Logic Block


/** symmetric en/decryption key */
type Key = _Key

/** unit of text applied to block cipher */
type Block = _Block

/** block en/decrypt signature */
type BlockOp = BlockCipher_::Op Key Block

/** encrypt a block */
encryptBlock: BlockOp
encryptBlock = _encryptBlock

/** decrypt a block */
decryptBlock: BlockOp
decryptBlock = _decryptBlock

/** Decryption with same key recovers encrypted block. */
blockRecovery: Key -> Block -> Bit
property blockRecovery k t = 
  decryptBlock k (encryptBlock k t) == t


/** multi-block en/decrypt signature */
type Op n = Key -> Block -> [n]Block -> [n]Block


/** encrypt multiple blocks */
encrypt: {n} Op n
encrypt k iv ps = cs
  where
    cs = [ encryptBlock k (p ^ c')
         | p <- ps
         | c' <- [iv] # cs ]

/** decrypt multiple blocks */
decrypt: {n} Op n
decrypt k iv cs = 
    [ (decryptBlock k c) ^ c'
    | c <- cs
    | c' <- [iv] # cs ]


/** Decryption with same key and IV recovers encrypted blocks. */
recovery : {n} (fin n) => Key -> Block -> [n]Block -> Bit
recovery k iv t = 
  decrypt k iv (encrypt k iv t) == t
