/*
 * adapted from `Primitive::Symmetric::Cipher::Block::Cipher` in
 * `https://github.com/GaloisInc/cryptol-specs`
 */

module Primitive::Symmetric::Cipher::Block where

parameter
  /** symmetric en/decryption key */
  type _Key: *
  /** unit of text applied to block cipher */
  type _Block: *
  /** needed to prove decryption recovers encrypted block(s) */
  type constraint Cmp _Block

  /** encrypt a block */
  _encrypt: Op
  /** decrypt a block */
  _decrypt: Op

/** symmetric en/decryption key */
type Key = _Key

/** unit of text applied to block cipher */
type Block = _Block

/** en/decrypt signature */
type Op = Key -> Block -> Block

/** encrypt a block */
encrypt: Op
encrypt = _encrypt
/** decrypt a block */
decrypt: Op
decrypt = _decrypt

/** Decryption with same key recovers encrypted block. */
recovery: Key -> Block -> Bit
property recovery k t = 
  decrypt k (encrypt k t) == t
