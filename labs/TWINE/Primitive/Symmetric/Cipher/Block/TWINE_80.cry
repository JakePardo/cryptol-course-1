module Primitive::Symmetric::Cipher::Block::TWINE_80 = Primitive::Symmetric::Cipher::Block::TWINE where

import Primitive::Symmetric::Cipher::Block::TWINE_Common

// Primitive::Symmetric::Cipher::Block::TWINE parameters

/** indicates 80-bit key length */
type _k = 0

/** TWINE-80 key schedule */
_keySchedule: (Key _k) -> RoundKey
_keySchedule K = RK
  where
    WKs = [ groupBy`{4} K ]
        # [ ((take`{4} WK' <<< 1) # (drop WK')) <<< 4
              where
                WK' = updateXORs WK ([1, 4, 7, 19:[5]]) [S (WK@0), S (WK@16), H, L]
          | [H,L] <- CONS_HL
          | WK <- WKs ]

    RK = join [ join (WK @@ ([1, 3, 4, 6, 13, 14, 15, 16:[5]]))
              | WK <- WKs ]


// non-exported non-parameters

/** Encryption test vector from Appendix B passes. */
property test_80 = Enc (_keySchedule 0x_00112233_44556677_8899) 0x_01234567_89ABCDEF == 0x_7C1F0F80_B1DF9C28
/** Decryption test vector from Appendx B passes. */
property test_80' = Dec (_keySchedule 0x_00112233_44556677_8899) 0x_7C1F0F80_B1DF9C28 == 0x_01234567_89ABCDEF
