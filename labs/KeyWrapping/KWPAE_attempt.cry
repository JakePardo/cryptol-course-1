module labs::KeyWrapping::KWPAE_attempt where

import labs::KeyWrapping::NIST800_38f_Answers

import specs::Primitive::Symmetric::Cipher::Block::AES_parameterized as AES

widen a = 0 # a

KWPAE_attempt :
    {k, l, n}
    (fin k,
     fin l,
     k > 0,
     k < 2^^32,
     l == 32 + 32 + (8*k) + (8*k) %^ 64,  // type of S
     fin n,                               // n is the type of the input to W
     n >= 3,                              // Constraint levied from W
     64 >= width (6 * (n - 1)),           // Constraint levied from W
     64 * n == max 192 l                  // Relate n and l
    ) =>
    ([128] -> [128]) -> [8*k] -> [l]
    
KWPAE_attempt CIPHk P = C
  where
    ICV2 = 0xA65959A6
    PLEN = `k : [32]
    PAD = zero : [(8*k) %^ 64]
    S = ICV2 # PLEN # P # PAD : [l]
    C = if PLEN <= 64 then
            widen (CIPHk (take S))
          else
            take (join (W`{n} CIPHk (split (S # 0))))

